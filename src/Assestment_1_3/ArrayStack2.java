package Assestment_1_3; /**    A class of stacks whose entries are stored in an array.    @author Frank M. Carrano    @version 3.0*/import java.util.Arrays;public class ArrayStack2<T> implements StackInterface<T>{   private T[] stack;    // array of stack entries   private int topIndex; // index of top entry   private static final int DEFAULT_INITIAL_CAPACITY = 50;     public ArrayStack2()   {      this(DEFAULT_INITIAL_CAPACITY);   } // end default constructor     public ArrayStack2(int initialCapacity)   {      // the cast is safe because the new array contains null entries      @SuppressWarnings("unchecked")      T[] tempStack = (T[])new Object[initialCapacity];      stack = tempStack;      topIndex = -1;  } // end constructor   public void push(T newEntry)   {         ensureCapacity();             topIndex++;             stack[topIndex] = newEntry;      } // end push         private void ensureCapacity()   {      if (topIndex == stack.length - 1) // if array is full, double size of array      	   stack = Arrays.copyOf(stack, 2 * stack.length);      } // end ensureCapacity      public T peek()      {         T top = null;                if (!isEmpty())       	   top = stack[topIndex];                    return top;      } // end peek      public T pop()   {       T top = null;              if (!isEmpty()) {	   top = stack[topIndex];	   stack[topIndex] = null;	   topIndex--;        }       if(isTooBig()) {           reduceArray();       }       return top;   } // end pop      public boolean isEmpty()   {          return topIndex < 0;   } // end isEmpty   public void clear()   {       for(int i = 0; i <= topIndex; ++i)	   stack[i] = null;       topIndex = -1;   }    public void display()    {        if (isEmpty())        {            System.out.println("The stack is empty");        } else        {            for (int i = topIndex; i >= 0; i--)            {                System.out.println(stack[i]);            }        }    }    public int remove(int n)    {       int count = 0;        if (!isEmpty())        {            for (int i = 0; i < n && topIndex >= 0; i++)            {                pop();                count++;            }        }        return count;    }    private boolean isTooBig() {        return topIndex < stack.length / 2 && stack.length > 20;    }    private void reduceArray() {        T[] newArray = Arrays.copyOf(stack, stack.length * 3 / 4);        stack = newArray;    }    public int getArraySize() {        return stack.length;    }} // end ArrayStack//TEST CASES RESULTS:////### Testing the Display method ###//        Stack before Display method://        The stack is empty//        Stack after Display method://        7//        6//        5//        456//        3//        -2//        1////        ### Testing the Remove method ###//        The top element Before Remove is: 14//        2 Elements were removed//        The top element After Remove is: 12////        ### Testing the Reduce method ###//        Initial Array size: 27//        Array size Before of New big array: 216//        Array size Before of Reduced array: 67////        Process finished with exit code 0