package Assestment_4;import java.util.Arrays;public class ListClient{	public static void main(String[] args) 	{        // Problem 1:		testList();        System.out.println("- - - - - - - - - - - - - - - - - - -");        AList<String> list = new AList<>();        list.add("a");        list.add("b");        list.add("c");        list.add("a");        list.add("d");        list.add("a");        System.out.println("Before removing:");        System.out.println(Arrays.toString(list.toArray()));        int numRemoved = list.removeEvery("a");        System.out.println("After removing:");        System.out.println(Arrays.toString(list.toArray()));        System.out.println("Number of items removed: " + numRemoved);        System.out.println("- - - - - - - - - - - - - - - - - - -");        testEquals();	}  // end main    public static void testEquals() {        // Create two AList objects with the same elements:        ListInterface<String> list1 = new AList<>();        ListInterface<String> list2 = new AList<>();        list1.add("apple");        list1.add("banana");        list2.add("apple");        list2.add("banana");        System.out.println(list1.equals(list2));        // Create two AList objects with different elements:        ListInterface<String> list3 = new AList<>();        ListInterface<String> list4 = new AList<>();        list3.add("apple");        list3.add("banana");        list4.add("apple");        list4.add("orange");        System.out.println(list3.equals(list4));        // Create two AList objects with different types of elements and Not!:        ListInterface<String> list5 = new AList<>();        ListInterface<Character> list6 = new AList<>();        list5.add("a");        list5.add("b");        list6.add('a');        list6.add('b');        System.out.println(!list3.equals(list4));        // Problem 2:        System.out.println("- - - - - - - - - - - - - - - - - - -");    }	public static void testList() 	{      ListInterface<String> runnerList = new AList<String>();      //  runnerList has only methods in ListInterface      runnerList.add("16"); // winner      runnerList.add(" 4"); // second place      runnerList.add("33"); // third place      runnerList.add("27"); // fourth place      runnerList.add("-20"); // fifth place      runnerList.add("5"); // sixth place      runnerList.add("16"); // seventh - duplicate of first entry      runnerList.add("33"); // eighth - duplicate of third entry      runnerList.add("101"); // ninth place      runnerList.add("0"); // tenth place      runnerList.add("5"); // eleventh place      displayList(runnerList);      // test getLastIndex method:      System.out.println("Last index of '16': " + ((AList<String>) runnerList).getLastIndex("16"));      System.out.println("Last index of '33': " + ((AList<String>) runnerList).getLastIndex("33"));      System.out.println("Last index of '27': " + ((AList<String>) runnerList).getLastIndex("27"));      System.out.println("Last index of '-20': " + ((AList<String>) runnerList).getLastIndex("-20"));      System.out.println("Last index of '0': " + ((AList<String>) runnerList).getLastIndex("0"));      System.out.println("Last index of '101': " + ((AList<String>) runnerList).getLastIndex("101"));      System.out.println("Last index of '5': " + ((AList<String>) runnerList).getLastIndex("5"));      System.out.println("Last index of '44': " + ((AList<String>) runnerList).getLastIndex("44"));    } // end testList      public static void displayList(ListInterface<String> list)   {      int numberOfEntries = list.getLength();      System.out.println("The list contains " + numberOfEntries +                         " entries, as follows:");      for (int position = 1; position <= numberOfEntries; position++)         System.out.println(list.getEntry(position) +                            " is entry " + position);      System.out.println();   } // end displayList} // end ListClient/*The list contains 11 entries, as follows:16 is entry 1 4 is entry 233 is entry 327 is entry 4-20 is entry 55 is entry 616 is entry 733 is entry 8101 is entry 90 is entry 105 is entry 11Last index of '16': 7Last index of '33': 8Last index of '27': 4Last index of '-20': 5Last index of '0': 10Last index of '101': 9Last index of '5': 11Last index of '44': -1- - - - - - - - - - - - - - - - - - -Before removing:[a, b, c, a, d, a]After removing:[b, c, d]Number of items removed: 3- - - - - - - - - - - - - - - - - - -truefalsetrue- - - - - - - - - - - - - - - - - - -Process finished with exit code 0*/